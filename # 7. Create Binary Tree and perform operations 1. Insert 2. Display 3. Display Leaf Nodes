7. Create Binary Tree and perform operations 1. Insert 2. Display 3. Display Leaf Nodes

#include<iostream>
#include<queue>

using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int value){
        data = value;
        left = nullptr;
        right = nullptr;
    }
};

class BinaryT {
    private:
        Node* root;
        
        void inorder(Node* node){
            if(node == nullptr) return;
            inorder(node->left);
            cout<<node->data<<" ";
            inorder(node->right);
        }
        
        void leafNodes(Node* node){
            if(node == nullptr) return;
            
            if(node->left == nullptr && node->right == nullptr){
                cout<<node->data<<" ";
            }
            
            leafNodes(node->left);
            leafNodes(node->right);
        }
        
    public:
        BinaryT(){
            root = nullptr;
        }
        
        void insert(int value){
            Node* newNode = new Node(value);
            if(root == nullptr){
                root = newNode;
                return;
            }
             queue<Node*> q;
             q.push(root);
             while(!q.empty()){
                 
                 Node* temp = q.front();
                 q.pop();
                 
                 if(temp -> left == nullptr){
                    temp -> left = newNode;
                    return;
                 }
                 else{
                     q.push(temp -> left);
                 }
                 
                 if(temp -> right == nullptr){
                    temp -> right = newNode;
                    return;
                 }
                 else{
                     q.push(temp -> right);
                 }
             }
        }
        
        void display(){
            cout<<"Inorder traversal: ";
            inorder(root);
            cout<<endl;
        }
        
        void leafNodes(){
            cout<<"Inorder traversal: ";
            leafNodes(root);
            cout<<endl;
        }
};

int main (){
    BinaryT tree;
    tree.insert(10);
    tree.insert(20);
    tree.insert(30);
    tree.insert(40);
    tree.insert(50);
    tree.insert(60);
    tree.insert(70);
    
    tree.display();
    
    tree.leafNodes();
}
