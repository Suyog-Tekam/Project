# 2.Implement stack operations using  Linked List

#include<iostream>
using namespace std;

struct Node{
    int data;
    Node* next;
};

class Stack{
    private:
        Node* top;
    public:
        Stack(){
            top = nullptr;
        }
        void push(int element){
            Node* newNode = new Node();
            newNode->data = element;
            newNode->next = top;
            top = newNode;
        }
        int pop(){
            if(top == nullptr){
                cout<<"Stack is empty"<<endl;
                return 0;
            }
            else{
                Node* temp = top;
                int poppedelement = top->data;
                top = top->next;
                delete temp;
                cout<<"Deleted element is "<<poppedelement<<endl;
                return poppedelement;
            }
        }
        int peek(){
            return top->data;
        }
        void isempty(){
            if(top == nullptr){
                cout<<"Stack is empty"<<endl;
            }
            else{
                cout<<"Stack is not empty"<<endl;
            }
        }
};

int main(){
    Stack s;
    s.push(10);
    s.push(20);
    s.push(30);
    cout<<"Top element is "<<s.peek()<<endl;
    s.isempty();
    s.pop();
    s.pop();
    s.pop();
    s.isempty();
}

