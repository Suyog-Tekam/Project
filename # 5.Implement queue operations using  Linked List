# 5.Implement queue operations using  Linked List

#include<iostream>
#include<queue>
using namespace std;

struct node{
    int data;
    node* next;
};

class Queue{
    private:
        node* front;
        node* rear;
    public:
        Queue(){
            front = NULL;
            rear = NULL;
        }
        bool isempty(){
            return (front == NULL);
        };
        void enqueue(int element){
            node * newNode = new node;
            newNode -> data = element;
            newNode -> next = NULL;
            if(isempty()){
                front = rear = newNode;
            }
            else{
                rear ->next = newNode;
                rear = newNode;
            }
            cout<<"Enqueued"<<rear->data<<endl;
        }
        
        void dequeue(){
            if(isempty()){
                cout<<"Stack is empty"<<endl;
                return;
            }
            node* temp = front;
            int temData = front -> data;
            front = front ->next;
            cout<<"Dequeued "<<temData<<endl;
            delete temp;
            if(front == NULL){
                rear = NULL;
            }
        }
        void display(){
            if(isempty()){
                cout<<"Stack is empty"<<endl;
                return;
            }
            node* temp = front;
            while(temp != NULL){
                cout<<temp -> data<< " ";
                temp = temp -> next;
            }
            cout<<endl;
        }
};

int main(){
    Queue q;
    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.enqueue(40);
    q.enqueue(50);
    q.display();
    q.dequeue();
    q.dequeue();
    if(q.isempty()){
        cout<<"Queue is empty"<<endl;
    }
    else{
        cout<<"Queue is not empty"<<endl;
    }
    q.display();
    q.dequeue();
    q.dequeue();
    q.dequeue();
    if(q.isempty()){
        cout<<"Queue is empty"<<endl;
    }
    else{
        cout<<"Queue is not empty"<<endl;
    }
}
